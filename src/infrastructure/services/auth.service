import type { AuthenticatedUser } from '../../domain/entities/User';
import type { LoginDTO, RegisterDTO, AuthResponseDTO } from '../../application/dtos/auth.dto';
import { AuthMapper } from '../../application/mappers/auth.mapper';

export class AuthService {
  private static instance: AuthService;
  private baseUrl: string;

  private constructor() {
    this.baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:3000';
  }

  static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  async login(dto: LoginDTO): Promise<AuthenticatedUser> {
    const response = await fetch(`${this.baseUrl}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(dto)
    });

    if (!response.ok) {
      throw new Error('Falha na autenticação');
    }

    const data: AuthResponseDTO = await response.json();
    return AuthMapper.toDomain(data);
  }

  async register(dto: RegisterDTO): Promise<AuthenticatedUser> {
    const response = await fetch(`${this.baseUrl}/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(dto)
    });

    if (!response.ok) {
      throw new Error('Falha no registro');
    }

    const data: AuthResponseDTO = await response.json();
    return AuthMapper.toDomain(data);
  }

  async logout(): Promise<void> {
    const response = await fetch(`${this.baseUrl}/auth/logout`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Falha ao fazer logout');
    }
  }
}